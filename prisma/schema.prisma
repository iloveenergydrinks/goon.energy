generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hull {
  id              String   @id
  name            String
  description     String?
  sizeId          String
  archetype       String?
  powerCapacity   Int
  bandwidthLimit  Int
  compatibleTags  String[] @default([])
  incompatibleTags String[] @default([])
  preferredWeapons String[] @default([])
  baseStats       Json?
  grid            Json
  mismatchTolerance Float?
  slotBias        Json?
  tagAffinities   Json?
  tagPenalties    Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PrimarySystem {
  id            String   @id
  name          String
  description   String?
  icon          String?
  baseStats     Json?
  minPowerSlots Int      @default(0)
  minAmmoSlots  Int?
  powerDraw     Int      @default(30)
  tags          String[] @default([])
  archetypeFocus String[] @default([])
  tagAffinities Json?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SecondarySystem {
  id               String   @id
  name             String
  category         String
  description      String?
  baseStats        Json?
  deltaPowerSlots  Int      @default(0)
  deltaAmmoSlots   Int      @default(0)
  deltaUtilitySlots Int      @default(0)
  powerDraw        Int      @default(10)
  tags             String[] @default([])
  archetypeFocus   String[] @default([])
  tagAffinities    Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Module {
  id             String   @id
  familyId       String?
  familyName     String?
  variantTier    String?
  minHullSize    String?
  slot           String
  shape          Json
  stats          Json?
  description    String?
  baseBW         Int?
  tags           String[] @default([])
  archetypeBias  Json?
  tagAffinities  Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ModuleType {
  id              String   @id
  name            String   @unique
  displayName     String
  description     String?
  
  // Visual settings
  color           String   // Hex color code for this module type
  icon            String?  // Optional icon identifier
  
  // Module characteristics
  baseBandwidth   Int      @default(10) // Base bandwidth cost for this type
  category        String   @default("custom") // Category: base, weapon, defense, utility, custom
  
  // Usage settings
  isActive        Boolean  @default(true)
  isSystemType    Boolean  @default(false) // True for Power, Ammo, Utility
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CustomSlotType {
  id              String   @id
  name            String   @unique
  displayName     String
  description     String?
  
  // Compatibility settings
  accepts         String[] // Array of module types this slot accepts (can include custom types)
  preferredType   String?  // Preferred module type (for bandwidth optimization)
  bwMultiplier    Float    @default(1.2) // Bandwidth multiplier for non-preferred types
  
  // Visual settings
  color           String   // Hex color code
  icon            String?  // Optional icon identifier
  
  // Usage settings
  isActive        Boolean  @default(true)
  isSystemSlot    Boolean  @default(false) // True for built-in slots like Hybrid-PA
  archetypeHints  String[] @default([]) // Suggested archetypes for this slot
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Industrial System Tables

model Player {
  id              String   @id @default(cuid())
  name            String   @unique
  isk             BigInt   @default(1000000)  // Using isk as column but calling it ORE in UI
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  materials       PlayerMaterial[]
  resourceNodes   ResourceNode[]
  miningOps       MiningOperation[]
  blueprints      Blueprint[]
}

model ResourceNode {
  id              String   @id @default(cuid())
  name            String
  type            String   // asteroid, gas_cloud, planetary, salvage
  tier            Int      // 1-5
  
  // Resource properties
  resourceType    String   // titanium, plasma, quantum, etc.
  totalAmount     BigInt   // Total mineable amount
  currentAmount   BigInt   // Current remaining amount
  baseYield       Int      @default(100) // Base units per click
  purity          Float    @default(0.3) // Base purity 0-1
  
  // Location
  sector          String
  coordinates     Json     // [x, y, z]
  
  // Status
  active          Boolean  @default(true)
  depleted        Boolean  @default(false)
  respawnAt       DateTime?
  
  // Ownership
  discoveredBy    String?
  discoveredAt    DateTime?
  player          Player?  @relation(fields: [discoveredBy], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  miningOps       MiningOperation[]
  
  @@index([active, depleted])
  @@index([sector])
}

model Material {
  id              String   @id @default(cuid())
  name            String
  category        String   // metal, gas, crystal, composite, exotic
  baseValue       Int      @default(100)
  
  // Base attributes (for newly mined materials)
  baseAttributes  Json     // { strength, conductivity, density, reactivity, stability, elasticity }
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  playerMaterials PlayerMaterial[]
}

model PlayerMaterial {
  id              String   @id @default(cuid())
  playerId        String
  materialId      String
  
  // Instance properties
  quantity        BigInt
  tier            Int      // 1-5
  purity          Float    // 0-1
  attributes      Json     // Actual attributes for this stack
  
  // Relations
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  material        Material @relation(fields: [materialId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([playerId, materialId, tier, purity])
  @@index([playerId])
}

model MiningOperation {
  id              String   @id @default(cuid())
  playerId        String
  nodeId          String
  
  // Mining details
  materialGained  String   // Material type
  quantityMined   BigInt
  purityGained    Float
  tierGained      Int
  
  // Timestamp
  minedAt         DateTime @default(now())
  
  // Relations
  player          Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  node            ResourceNode @relation(fields: [nodeId], references: [id])
  
  @@index([playerId])
  @@index([nodeId])
}

model Blueprint {
  id                  String   @id @default(cuid())
  playerId           String
  name               String
  type               String   // hull, module, primary, secondary
  baseItemId         String   // Reference to base item
  
  // Research progress
  researchLevel      Int      @default(0)
  researchPoints     Float    @default(0)
  statImprovements   Json     @default("{}")
  materialEfficiency Float    @default(1.0)
  productionTime     Float    @default(1.0)
  
  // Research state
  inResearch         Boolean  @default(false)
  researchStarted    DateTime?
  lastResearchSuccess Boolean @default(true)
  consecutiveFailures Int     @default(0)
  
  // Sharing
  isOriginal         Boolean  @default(true)
  isShared           Boolean  @default(false)
  sharedWith         String[] @default([])
  securityLevel      Int      @default(100)
  
  // Relations
  player             Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([playerId, baseItemId])
  @@index([playerId])
}

